---
title: "Hydro-variables"
format: html
editor: visual
---

## To do

Anthony Aji (30m) Status Needed DEM at elevation Using Elevator - pulling from open topography - Terra or could use whitebox Elevation wa_dev2 slope To do - Works fine - Terra package Slope (at 3 scales) wa_dev3 profc To do - Works fine. - Multiscale DTM, (Kai’s code) Surface metrics code did not work - exhausted memory Profc (at 3 scales) wa_dev8 planc To do - Works fine. - Multiscale DTM, (Kai’s code) Surface metrics code did not work - exhausted memory Planc (at 3 scales) wa_dinf flow_acc Done - whitebox. Slope fed in from Terra. TWI wa_plan twi Done - Terra package VRM (Ruggedness) wa_prof roughness\
Done - Terra package TPI/Dev (at 3 scales) wa_rugg TPI Testing out the whitebox tools for one watershed. DTW wa_slop vrm

wa_twi

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
library(terra)
library(sf)
library(MultiscaleDTM)
library(here)
library(whitebox)
```

originl crs - coord. ref. : NAD83 / UTM zone 10N (EPSG:26910)

transform to 3740 - NAD83(HARN) / UTM zone 10N (EPSG:3740)

```{r}
finescaledem <- rast("~/Documents/Qgis/teal/Hoh_data/DEM_Input/Hoh_all_DTM_NAD83_4m_v2_clip.tif")  %>% terra::project("EPSG:3740")
writeRaster(finescaledem, "~/Documents/Qgis/teal/Hoh_data/stacked/TopoHoh-3740crs.tif",  gdal=c("COMPRESS=LZW"),overwrite=TRUE)
```

Save it by compressing

# Calculate Slope, at different negihbourhoods

MultiScale (Prof/Plan/Slope/TPI) 30 m - 3 by 3, 9 by 9, and 17 by 17

```{r}
slope4 <- terrain(finescaledem, v = "slope", neighbors = 4)
writeRaster(slope4, "~/Documents/Qgis/teal/Hoh_data/stacked/TopoHoh-slope4.tif",  gdal=c("COMPRESS=LZW"),overwrite=TRUE)
unlink(slope4)

slope8 <- terrain(finescaledem, v = "slope", neighbors = 8)
writeRaster(slope8, "~/Documents/Qgis/teal/Hoh_data/stacked/TopoHoh-slope8.tif",  gdal=c("COMPRESS=LZW"),overwrite=TRUE)
unlink(slope8)


# Define focal window for smoothing (9x9 window)
w_9x9 <- matrix(1, nrow = 9, ncol = 9)
# Apply focal to smooth the DEM with 9x9 window
smoothed_dem_9x9 <- focal(finescaledem, w = w_9x9, fun = mean)
# Calculate slope on the smoothed DEM (9x9 window)
slope_9x9 <- terrain(smoothed_dem_9x9, v = "slope", unit = "degrees")
writeRaster(slope_9x9, "~/Documents/Qgis/teal/Hoh_data/stacked/TopoHoh-slope9.tif",  gdal=c("COMPRESS=LZW"),overwrite=TRUE)
unlink(slope_9x9)


# Define focal window for smoothing (17x17 window)
w_17x17 <- matrix(1, nrow = 17, ncol = 17)
# Apply focal to smooth the DEM with 17x17 window
smoothed_dem_17x17 <- focal(finescaledem, w = w_17x17, fun = mean)
# Calculate slope on the smoothed DEM (17x17 window)
slope_17x17 <- terrain(smoothed_dem_17x17, v = "slope", unit = "degrees")
writeRaster(slope_17x17, "~/Documents/Qgis/teal/Hoh_data/stacked/TopoHoh-slope17.tif",  gdal=c("COMPRESS=LZW"),overwrite=TRUE)
unlink(slope_17x17)


# Save or plot the result
plot(slope, main = "Slope")
```

```{r}
library(terra)
library(whitebox)

slp9 <- rast('~/Documents/Qgis/teal/Hoh_data/stacked/TopoHoh-slope9.tif')
plot(slp9)

slp17 <- rast('~/Documents/Qgis/teal/Hoh_data/stacked/TopoHoh-slope17.tif')
plot(slp17)
```

# Do depth to water

```{r}
library(terra)
library(whitebox)
# Step 1: Load DEM using terra
dem <- rast("~/Documents/Qgis/teal/Hoh_data/stacked/TopoHoh-3740crs.tif")

# Step 2: Fill depressions in the DEM using WhiteboxTools
wbt_fill_depressions("~/Documents/Qgis/teal/Hoh_data/stacked/TopoHoh-3740crs.tif", "./filled_dem.tif")

# Step 3: Calculate D8 flow accumulation
wbt_d8_flow_accumulation("./filled_dem.tif", "./flow_accumulation.tif", out_type = "cells")
wbt_d_inf_flow_accumulation("./filled_dem.tif", "./flow_accumulationdinf.tif")

flaccdinf <- rast("./flow_accumulationdinf.tif")
plot(flaccdinf)

flacc <- rast("./flow_accumulation.tif")
plot(flacc)

# Step 4: Reclassify flow accumulation to identify water bodies using a threshold of 1000
#	Threshold of 1000: Flow accumulation values >= 1000 are reclassified as 1 (water bodies).
#	Flow accumulation values < 1000 are reclassified as 0 (non-water bodies).

wbt_reclass(
  input = "./flow_accumulation.tif",
  output = "./water_bodies.tif",
  reclass_vals = "200000000;9200000000;1;0;200000000;0"
)

wb <- rast("./water_bodies.tif")
plot(wb)

# Step 5: Calculate Euclidean distance from water bodies
wbt_euclidean_distance("./water_bodies.tif", "./distance_to_water.tif")

# Step 6: Calculate depth to water by subtracting water bodies from DEM
wbt_subtract("~/Documents/Qgis/teal/Hoh_data/stacked/TopoHoh-3740crs.tif", "./water_bodies.tif", "./depth_to_water.tif")

# Step 7: Load and plot the depth to water raster using terra
depth_to_water <- rast("depth_to_water.tif")
plot(depth_to_water)
```

# Calculate Aspect, at different negihbourhoods

```{r}
aspect <- terrain(finescaledem, v = "aspect", neighbors = 8)
writeRaster(aspect, "~/Documents/Qgis/teal/Hoh_data/stacked/TopoHoh-aspect.tif",  gdal=c("COMPRESS=LZW"),overwrite=TRUE)
# Save or plot the result
plot(aspect, main = "Aspect")
```

# Calculate Profile curvature using Terra

```{r}
# Define Sobel filters for x and y direction gradients
sobel_x <- matrix(c(-1, 0, 1, -2, 0, 2, -1, 0, 1), nrow = 3, byrow = TRUE)
sobel_y <- matrix(c(-1, -2, -1, 0, 0, 0, 1, 2, 1), nrow = 3, byrow = TRUE)

# Apply Sobel filters to compute gradients
dx <- focal(finescaledem, w = sobel_x, fun = sum, na.rm = TRUE)
dy <- focal(finescaledem, w = sobel_y, fun = sum, na.rm = TRUE)

# Second derivatives by applying the Sobel filters to the first derivatives
dxx <- focal(dx, w = sobel_x, fun = sum, na.rm = TRUE)
dyy <- focal(dy, w = sobel_y, fun = sum, na.rm = TRUE)
dxy <- focal(dx, w = sobel_y, fun = sum, na.rm = TRUE)

# Calculate profile curvature
profile_curvature <- (dxx * cos(aspect)^2) + (2 * dxy * sin(aspect) * cos(aspect)) + (dyy * sin(aspect)^2)

plot(profile_curvature, main = paste("Profile Curvature (Window Size:", window_size, "x", window_size, ")"))
```

# Calculate TPI, at different negihbourhoods

Most terrain indices are according to Wilson et al. (2007), as in gdaldem. TRI (Terrain Ruggedness Index) is the mean of the absolute differences between the value of a cell and its 8 surrounding cells.

TPI (Topographic Position Index) is the difference between the value of a cell and the mean value of its 8 surrounding cells. Roughness is the difference between the maximum and the minimum value of a cell and its 8 surrounding cells.

```{r}
TPI <- focal(finescaledem, w=3, fun=\(x) x[5] - mean(x[-5]))
writeRaster(TPI, "~/Documents/Qgis/teal/Hoh_data/stacked/TopoHoh-TPI.tif",  gdal=c("COMPRESS=LZW"),overwrite=TRUE)
# Save or plot the result
plot(TPI, main = "TPI")
```

# Profile curvature using R Multiscale

MultiScale (Prof/Plan/Slope/TPI) 30 m - 3 by 3, 9 by 9, and 17 by 17

```{r}
# Set the window size (e.g., 3x3)
window_size <- 3

# Calculate profile curvature with a specified window size
profile_curv_3 <- Qfit(finescaledem, metrics = c("profc"), w = c(3, 3))
# Calculate profile curvature with a specified window size
profile_curv_9 <- Qfit(finescaledem, metrics = c("profc"), w = c(9, 9))
# Calculate profile curvature with a specified window size
profile_curv_17 <- Qfit(finescaledem, metrics = c("profc"), w = c(17, 17))

writeRaster(profile_curv_3, "~/Documents/Qgis/teal/Hoh_data/stacked/TopoHoh-profc3.tif",  gdal=c("COMPRESS=LZW"))
unlink(profile_curv_3)

writeRaster(profile_curv_9, "~/Documents/Qgis/teal/Hoh_data/stacked/TopoHoh-profc9.tif",  gdal=c("COMPRESS=LZW"))
unlink(profile_curv_9)

writeRaster(profile_curv_17, "~/Documents/Qgis/teal/Hoh_data/stacked/TopoHoh-profc17.tif",  gdal=c("COMPRESS=LZW"))
unlink(profile_curv_17)

writeRaster(profile_curv, "~/Documents/Qgis/teal/Hoh_data/stacked/TopoHoh-profc.tif",  gdal=c("COMPRESS=LZW"))
# Plot the result
plot(profile_curv, main = paste("Profile Curvature (Window Size:", window_size, "x", window_size, ")"))
```

# Plan curvature using R - Terra pkg

```{r}
# Set the window size (e.g., 3x3)
window_size <- 3

# Calculate plan curvature with a specified window size
plan_curv3 <- Qfit(finescaledem, metrics = c("planc"), w = c(3, 3))
writeRaster(plan_curv3, "~/Documents/Qgis/teal/Hoh_data/stacked/TopoHoh-planc3.tif",  gdal=c("COMPRESS=LZW"))
unlink(plan_curv3)

# Calculate plan curvature with a specified window size
plan_curv9 <- Qfit(finescaledem, metrics = c("planc"), w = c(9, 9))
writeRaster(plan_curv9, "~/Documents/Qgis/teal/Hoh_data/stacked/TopoHoh-planc9.tif",  gdal=c("COMPRESS=LZW"))
unlink(plan_curv9)

# Calculate plan curvature with a specified window size
plan_curv17 <- Qfit(finescaledem, metrics = c("planc"), w = c(17, 17))
writeRaster(plan_curv17, "~/Documents/Qgis/teal/Hoh_data/stacked/TopoHoh-planc17.tif",  gdal=c("COMPRESS=LZW"))
unlink(plan_curv17)

# Plot the result
plot(plan_curv, main = paste("Plan Curvature (Window Size:", window_size, "x", window_size, ")"))
```

# Plan curvature using R

```         
•   Low TWI Values (0 - 6):
•   Indicate areas that are likely to be drier.
•   Found on ridges, steep slopes, and areas with minimal water accumulation.
•   Associated with well-drained soils and lower soil moisture.
•   Moderate TWI Values (6 - 10):
•   Represent areas with moderate potential for water accumulation.
•   Typically found on gentle slopes or in transition zones between ridges and valleys.
•   These areas may have moderate soil moisture levels.
•   High TWI Values (10 and above):
•   Indicate areas likely to be wetter.
•   Found in valleys, depressions, or flat areas where water accumulates.
•   Associated with poorly drained soils, high soil moisture, and potential wetland areas.
```

```{r}
finescaledem <- rast("~/Documents/Qgis/teal/Hoh_data/stacked/TopoHoh-3740crs.tif")

# Calculate the slope (in radians)
slope <- terrain(finescaledem, "slope", unit = "radians")

#The flow direction codes are usually as follows:

#	•	1: East
#	•	2: Southeast

# Calculate the specific catchment area (SCA)
flowdir <- terrain(finescaledem, "flowdir")
weight<- cellSize(finescaledem,transform=FALSE,unit="m")

plot(flowdir)
#The algorithm is an adaptation of the one proposed by Zhou at al, 2019.
# Calculate flow accumulation (which is equivalent to Specific Catchment Area)
flow_accumulation <- flowAccumulation(flowdir,weight)

plot(flow_accumulation)

# Calculate TWI
twi <- log(flow_accumulation / tan(slope))

# Save or plot the result
plot(twi, main = "Topographic Wetness Index (TWI)")
```

```{r}


```
